use edgeless_function::*;
use serde::Serialize;
use serde_json;

struct GenerateSamplesFun;

struct InitState {                  // Populated by what has been specified into "init-payload" in workflow.json
    batch_size: u64,
    generation_interval_ms: u64,
}

struct State {
    telemetry_id: i32,            // Identifies each telemetry sample couple
    counter: u64,
    lcg: edgeless_function::lcg::Lcg,           // Random values generation
}

#[derive(Debug, Serialize)]
struct AccelerometerData {
    x: f64,
    y: f64,
    z: f64,
}

#[derive(Debug, Serialize)]
struct Payload {
    batch_id: u64,
    batch: Vec<AccelerometerData>,
}

static INIT_STATE: std::sync::OnceLock<InitState> = std::sync::OnceLock::new();
static STATE: std::sync::OnceLock<std::sync::Mutex<State>> = std::sync::OnceLock::new();

impl EdgeFunction for GenerateSamplesFun {

    // ------ EDGELESS FUNCTIONS REDEFINITION ------

    // Starts and generates 100 samples every 5 seconds. 
    // Sends them to the next function in the workflow
    fn handle_cast(_src: InstanceId, _encoded_message: &[u8]) {
	    let mut state = STATE.get().unwrap().lock().unwrap();
        
        cast("metric", format!("function:begin:{}", state.telemetry_id).as_bytes());
        
        let init_state = INIT_STATE.get().unwrap();         // Getting initialization params
        
        let batch_size = init_state.batch_size;
        let generation_interval_ms: u64 = init_state.generation_interval_ms;
        let num_classes = 5;            // Classifier trained on num_classes classes

        let chosen_class = (state.lcg.rand() * num_classes as f32) as u32;
        let accelerometer_samples = get_accelerometer_samples(chosen_class);

        if state.counter == 0 {
            cast("aoi_measurement_start", "--- NEW MEASUREMENT ROUND ---".as_bytes());
        }
    
        let mut batch = Vec::with_capacity(batch_size as usize);
        
        for sample in accelerometer_samples.iter().take(batch_size.try_into().unwrap()) {                // Generating batch of accelerometric data
            batch.push(
                AccelerometerData {
                    x: sample[0] as f64,
                    y: sample[1] as f64,
                    z: sample[2] as f64,
                }
            );
        }

        log::info!("Generated batch #{}", state.counter);

        // Logging to file-log resource
        cast("aoi_measurement_start", format!("{}", state.counter).as_bytes());

        let payload = Payload {
            batch_id: state.counter,
            batch,
        };

        let serialized_payload = match serde_json::to_string(&payload) {
            Ok(json) => json,
            Err(e) => {
                log::info!("Error serializing payload: {}", e);
                String::new()
            }
        };

        // Forwarding data in the workflow
        cast("generated_samples", serialized_payload.as_bytes());

        cast("metric", format!("function:end:{}", state.telemetry_id).as_bytes());
        state.telemetry_id += 1;

	state.counter += 1;
        delayed_cast(generation_interval_ms, "self", b"");
    }

    fn handle_call(_src: InstanceId, _encoded_message: &[u8]) -> CallRet {
        log::info!("handle_call() called");
        CallRet::NoReply
    }

    fn handle_init(payload: Option<&[u8]>, _init_state: Option<&[u8]>) {
        edgeless_function::init_logger();

        let arguments = if let Some(payload) = payload {
            let str_payload = core::str::from_utf8(payload).unwrap();
            edgeless_function::parse_init_payload(str_payload)
        } else {
            std::collections::HashMap::new()
        };

        let batch_size = arguments.get("batch_size").expect("Invalid batch size provided").parse::<u64>().unwrap();
        let generation_interval_ms = arguments.get("generation_interval_ms").expect("Invalid generation interval provided").parse::<u64>().unwrap();
        let start_working_after_ms = arguments.get("start_working_after_ms").expect("Invalid starting delay provided").parse::<u64>().unwrap();
        let seed = arguments.get("seed").unwrap_or(&"0").parse::<u32>().unwrap_or(0);

        let _ = INIT_STATE.set(
            InitState { 
                batch_size, 
                generation_interval_ms
            }
        );

        let lcg = edgeless_function::lcg::Lcg::new(seed);

        let _ = STATE.set(std::sync::Mutex::new(
            State { 
                telemetry_id: 0,
                counter: 0,
                lcg,
            }
        ));

        log::info!(
            "Starting in {} ms... Batch size: {}, Generating every {} ms, but A SINGLE ITERATION OF THE WORKFLOW WILL BE EXECUTED.", 
            start_working_after_ms,
            batch_size, 
            generation_interval_ms
        );

        delayed_cast(start_working_after_ms.clone(), "self", b"");          // Action happens in handle_cast()
    }

    fn handle_stop() {
        log::info!("Stopped");
    }
}

edgeless_function::export!(GenerateSamplesFun);


fn get_accelerometer_samples (class: u32) -> Vec<Vec<f64>> {
    match class {
        0 => {              // Jogging
            vec![
                vec![6.519411, -6.2874727, 2.6625018],
                vec![15.768212, -19.235315, 9.481189],
                vec![2.822764, -19.235315, 8.4325285],
                vec![-2.384625, -13.721469, 5.4972367],
                vec![-6.495469, -2.6937761, 5.3775268],
                vec![-4.642357, -0.26844987, 3.1006408],
                vec![-2.8491, -0.77123225, 4.3623853],
                vec![-1.1994951, -5.626673, 9.655965],
                vec![0.93852705, -9.091084, 19.405155],
                vec![5.8825536, -7.7814546, 14.039748],
                vec![1.079785, -3.6107554, 10.592098],
                vec![-0.2825158, 2.0754735, 5.865944],
                vec![2.4684220000000003, -0.11282676, 4.8148894],
                vec![2.4636335, -1.6139913, 2.8492496],
                vec![2.183512, 0.72993225, 2.7726352],
                vec![3.4332852, -0.21817163, 2.901922],
                vec![4.1491513, -2.4375966, 12.260857],
                vec![7.7572136, -3.6083612, 18.311005],
                vec![0.7182605, 1.4649521, 16.357336],
                vec![-1.4867992, -1.2213421, 14.389302],
                vec![-3.2992098, 0.46657005, 9.4356985],
                vec![-5.4515970000000005, 1.8408419, 1.7718589],
                vec![-5.0254292000000005, 2.616563, 1.8460791],
                vec![-3.8019924, 0.3875614, 7.505972],
                vec![2.5953147, -5.842151599999999, 19.405155],
                vec![-1.448492, -10.379164, 17.145027],
                vec![-3.8355112, -6.8165917, 8.26254],
                vec![-1.8148049, -3.3928830000000003, -0.40925884],
                vec![4.134786, -2.5908256, -2.8944402],
                vec![8.389283, -1.9228432, -1.2951134],
                vec![5.985504, -6.014533999999999, 0.43110594],
                vec![5.410896, -6.65618, -2.7627592],
                vec![7.2831616, -19.235315, -13.744963],
                vec![1.4437037, -19.235315, -11.20232],
                vec![-6.2608376, -15.174748999999998, -7.5583453],
                vec![-6.9862804, -4.154239, -2.6526258],
                vec![-9.102755, 2.0874445, -0.07885902],
                vec![-6.9647326000000005, 0.9310452, 1.6641198],
                vec![-5.3941364, -8.466196, -3.9167643],
                vec![-2.4253263, -19.235315, -7.915081],
                vec![4.0677485, -19.235315, -8.360403],
                vec![1.4700398, -10.101437, -4.1753383],
                vec![-1.6184803, -5.245995, -2.5520694],
                vec![2.44448, 1.4697405, -0.38531685],
                vec![10.527305, 4.3044753, 0.19407998],
                vec![5.5258174, -5.765537, 0.31618425],
                vec![8.659827, -8.016086999999999, 1.6162357],
                vec![6.7444663, -16.304813, -3.3158197],
                vec![2.2218192, -19.235315, -5.978172],
                vec![-3.655946, -19.235315, -7.402722],
                vec![-3.6631286, -9.057565, -5.6405897],
                vec![-6.835446000000001, -5.0113635, -1.3334208],
                vec![-4.876989, -0.7592612, 0.9506477],
                vec![-6.916848700000001, -0.8670003000000001, 0.49335518],
                vec![-3.2249897, -11.190798, -2.643049],
                vec![2.8874073, -19.235315, -7.1824555],
                vec![3.3303347000000003, -19.16349, -6.691644],
                vec![2.5761611, -8.401553, -3.3684921],
                vec![3.1842883, -1.6977881999999995, -2.2575827],
                vec![5.901707, -0.36421794, -0.39968204],
                vec![6.919242999999999, 2.5399487, 1.1158476],
                vec![7.350199000000001, 0.014065935, 0.24435821],
                vec![5.7939680000000005, -10.905888, -1.2256817],
                vec![7.5345526, -19.235315, -7.053169],
                vec![0.4333505, -19.235315, -6.56954],
                vec![-3.2896330000000003, -13.40304, -3.9646485],
                vec![-5.8466406, -6.8548990000000005, -2.6023476],
                vec![-5.81791, -0.9388263, 1.1038766],
                vec![-6.471527, -1.551742, 2.1262007],
                vec![-5.791574, -4.506187000000001, -1.96549],
                vec![-3.6343982000000006, -19.235315, -5.3700447],
                vec![-1.0366893, -19.235315, -6.6222124],
                vec![0.8858546, -18.24651, -2.4251766],
                vec![0.56982, -1.9874867, -0.83303255],
                vec![5.801151, 0.9789292, -4.338144],
                vec![8.803479, 2.6452937000000003, -1.5608698],
                vec![6.7684083, -2.6506805, -0.07646482],
                vec![3.2393548, -12.543522, 4.4725184],
                vec![-2.7940333, -9.263466, 0.502932],
                vec![2.3008277, -19.235315, -2.8226142],
                vec![-8.046911999999999, -15.251364, -6.56954],
                vec![-5.291186, -9.615414, -3.440318],
                vec![-6.035782299999999, -7.405565299999999, 0.16056114],
                vec![-5.889736, -1.8414404, 1.3073838],
                vec![-7.704541000000001, -1.6092029, 0.89797527],
                vec![-10.237606, -19.235315, -6.215198],
                vec![1.8100165, -19.235315, -5.8440967],
                vec![0.7182605, -14.43973, -4.158579],
                vec![1.0127473, -4.568436, -2.5185506],
                vec![3.4524388, -0.36900634, -1.086818],
                vec![6.531382, 2.149694, 0.16056114],
                vec![3.4308910000000004, -3.6610336, 2.8037598],
                vec![2.6264392999999995, -6.2348003, 2.7032034],
                vec![-0.3854665, -16.515503, -0.3422212],
                vec![6.172251999999999, -19.235315, -1.3334208],
                vec![-0.7661445, -13.965678, -0.028580783],
                vec![-3.1483753, -7.848492599999999, 0.19168578],
                vec![-3.7205894, -2.5740662, -0.5313631],
                vec![-4.8841715, 0.12659341, 0.3592799],
                vec![-7.264008, -1.3362638, 0.10788871],
            ]
        }
        1 => {              // Standing
            vec![
                vec![9.146749, 0.789488, 4.081665],
                vec![9.340678, 1.1629834, 3.1168017],
                vec![9.036615, 1.5819688, 2.9348423],
                vec![8.629601, 1.7567455, 3.0808887],
                vec![8.82832, 1.1007341999999998, 3.0425816],
                vec![9.02225, 0.44232875, 3.3490393],
                vec![9.208998, 1.062427, 3.5884595],
                vec![9.082105, 1.0336965, 3.404106],
                vec![8.888175, 0.88046765, 3.2796075],
                vec![8.722975, 0.7799111999999999, 3.229329],
                vec![8.895357, 0.5189431999999999, 3.4831145],
                vec![8.9959135, 0.88286185, 3.535787],
                vec![8.928875999999999, 0.86610246, 3.5908537],
                vec![8.797194500000002, 0.97384155, 3.3179147],
                vec![8.801983, 1.0600328, 3.308338],
                vec![8.876204, 0.97384155, 3.392135],
                vec![8.962394999999999, 1.0576386, 3.5214217],
                vec![8.945636, 0.98581254, 3.490297],
                vec![8.88578, 0.8948328999999999, 3.583671],
                vec![8.703821000000001, 1.2084733, 3.370587],
                vec![8.790011999999999, 1.2419921, 3.3993175],
                vec![8.938452999999999, 0.98102415, 3.557335],
                vec![9.007885, 0.8110358, 3.5262103],
                vec![8.823531, 1.3066356, 3.356222],
                vec![8.904933999999999, 1.2826935, 3.404106],
                vec![8.859444, 1.2611457, 3.3418567],
                vec![9.010279, 1.0432734, 3.4711435],
                vec![8.861838, 1.2419921, 3.3227031],
                vec![8.837896, 1.4694413, 3.253271],
                vec![8.72058, 1.4862007, 3.143138],
                vec![8.581717, 1.6537948, 2.8271034],
                vec![9.218575, 0.44711718, 2.9372365],
                vec![9.039009, 2.1278467, 2.6283846],
                vec![9.220968, 0.030526072, 3.356222],
                vec![8.586505, 1.8716671000000005, 2.2357354],
                vec![9.24491, -0.24480712, 1.7688662],
                vec![9.467571, -1.1019313, 1.3115736],
                vec![9.797971, -1.7603368, 1.3019968],
                vec![9.048586, 0.6362591, 1.5725416],
                vec![9.072528, -1.1354501, 0.8183681],
                vec![9.177873, -1.5448587, 0.461632],
                vec![10.226533, -1.9758149, 0.8351275],
                vec![9.079711, -1.453879, 0.5693711],
                vec![9.5848875, -2.2535424, 0.34192193],
                vec![9.422082, -2.0931308, 0.14080898],
                vec![9.350255, -2.131438, 0.19826983],
                vec![9.402928, -1.4754268, 0.32755673],
                vec![9.388563, -0.9487024, 0.049829323],
                vec![9.376592, -1.1881226, 0.023493104],
                vec![9.460389, -1.6549919999999998, 0.0019452889],
                vec![9.623195, -1.3557167, 0.3036147],
                vec![9.2904005, -1.8201919, 0.37783495],
                vec![9.347861, -1.9087774, 0.11447277],
                vec![9.395745, -2.1098902, -0.0052373162],
                vec![9.388563, -2.0548236, 0.1455974],
                vec![9.326313, -1.8656816000000005, 0.19348143],
                vec![9.367015, -1.7004818, 0.20545243],
                vec![9.453206, -1.8656816000000005, 0.36825815],
                vec![9.400534, -1.6023195, 0.32276833],
                vec![9.388563, -1.7770962, 0.104895964],
                vec![9.393352, -1.8082209, 0.04743512],
                vec![9.357438, -1.8968062, 0.17911622],
                vec![9.434052, -1.7723078, 0.33713353],
                vec![9.213786, -1.6238673, 0.36346975],
                vec![9.350255, -1.6813281999999998, 0.3107973],
                vec![9.33589, -1.6861166, 0.39938277],
                vec![9.407717, -1.8321629, 0.3036147],
                vec![9.343073, -1.9494787, 0.24615386],
                vec![9.333496, -1.7938557000000002, 0.23657705],
                vec![9.316736, -1.8417397, 0.22700025],
                vec![9.33589, -1.9087774, 0.3179799],
                vec![9.376592, -1.6621746, 0.45444942],
                vec![9.431659, -1.6837223999999995, 0.48796824],
                vec![9.378986, -1.5855601, 0.40417117],
                vec![9.402928, -1.7603368, 0.39938277],
                vec![9.383775, -1.8058267, 0.34671032],
                vec![9.343073, -1.7340006, 0.45205522],
                vec![9.340678, -1.6286557, 0.48078564],
                vec![9.347861, -1.6262615, 0.45444942],
                vec![9.395745, -1.8010383, 0.48557404],
                vec![9.316736, -2.0308816000000003, 0.49754503],
                vec![9.2425165, -2.0093338, 0.4712088],
                vec![9.319131, -1.9470845, 0.4161422],
                vec![9.402928, -1.8776526, 0.50472766],
                vec![9.405322, -1.8154035, 0.48317984],
                vec![9.378986, -1.882441, 0.473603],
                vec![9.309554, -1.9686323, 0.5741595],
                vec![9.340678, -1.774702, 0.51669866],
                vec![9.390957, -1.6597804, 0.54064065],
                vec![9.295189, -1.7028759999999998, 0.62204355],
                vec![9.369409, -1.5855601, 0.5885247],
                vec![9.378986, -1.7603368, 0.53345805],
                vec![9.39814, -1.5855601, 0.5861305],
                vec![9.355042999999998, -1.513734, 0.54303485],
                vec![9.376592, -1.4802152, 0.55021745],
                vec![9.414899, -1.6262615, 0.6076783],
                vec![9.319131, -1.6502035, 0.6100725],
                vec![9.350255, -1.678934, 0.5909189],
                vec![9.374197, -1.6549919999999998, 0.5597943],
                vec![9.371803, -1.6454151, 0.5645827],
            ]
        }
        2 => {              // Sitting
            vec![
                vec![-1.2234371000000002, -1.3117232, 8.878597],
                vec![-1.0989386, -1.3260883999999995, 8.981548],
                vec![-1.1444284, -1.4266449, 9.034221],
                vec![-1.2090719, -1.1153988, 9.510667],
                vec![-0.8690952, -1.9461867, 9.551369],
                vec![-0.51714754, -1.8001404, 9.034221],
                vec![-1.733402, -5.247791, 8.303989],
                vec![-1.6304513, -8.46081, 7.339126],
                vec![-0.8762778, -7.943662, 5.995979],
                vec![-1.2665327, -8.156746, 6.2282166],
                vec![-1.388637, -8.058583, 6.505944],
                vec![-1.958457, -7.029077, 6.886622],
                vec![-3.0095115000000003, -5.7553616, 7.6192474],
                vec![-3.4332852, -3.7992988, 8.253711],
                vec![-3.5122937999999992, -3.5479076000000003, 8.734945],
                vec![-2.7748797, -4.62051, 8.596082],
                vec![-2.9640217, -2.3005285, 8.907329],
                vec![-3.074155, -3.090615, 8.938453],
                vec![-2.5210943, -4.2374377, 9.237728],
                vec![-2.8060043, -4.881478, 7.9017634],
                vec![-3.1531637000000003, -4.5869913, 8.471583],
                vec![-3.004723, -3.8304234, 8.457218],
                vec![-3.4596214, -3.9094322, 8.495525],
                vec![-3.655946, -3.6412816, 8.60087],
                vec![-3.1387985, -3.9357684, 8.454824],
                vec![-2.7485435000000003, -3.9956234, 8.569746],
                vec![-2.7844565, -3.5479076000000003, 8.713398],
                vec![-3.0502129, -4.232649299999999, 8.605659],
                vec![-3.0765493, -4.2925043, 8.311172],
                vec![-3.2034419, -4.074632, 8.502708],
                vec![-2.870648, -4.2494087, 8.335114],
                vec![-2.920926, -4.026748, 8.5889],
                vec![-3.1076740000000003, -4.009989, 8.49792],
                vec![-3.2441432, -3.9453452000000007, 8.45243],
                vec![-3.3399115, -4.002806, 8.473978],
                vec![-3.1028855, -4.057873000000001, 8.445248],
                vec![-3.1747115000000004, -4.014777, 8.52665],
                vec![-3.229778, -4.009989, 8.462007],
                vec![-2.9017725, -4.144064, 8.514679],
                vec![-2.9712043, -4.1009684, 8.502708],
                vec![-3.016694, -4.093786, 8.464401],
                vec![-3.0023289, -4.206313, 8.514679],
                vec![-3.0454245, -4.0913916, 8.435671],
                vec![-3.1531637000000003, -4.1847653, 8.483555],
                vec![-3.1387985, -4.1536407, 8.49792],
                vec![-3.052607, -4.02196, 8.48116],
                vec![-2.930503, -4.1153336000000005, 8.488343],
                vec![-3.0382419, -4.2925043, 8.438065],
                vec![-2.9951463, -4.203919, 8.337508],
                vec![-3.0382419, -4.2302550000000005, 8.488343],
                vec![-2.9496565, -4.2541970000000005, 8.423699],
                vec![-2.9999347000000003, -4.203919, 8.430882],
                vec![-2.9807810000000003, -4.1368814, 8.418911],
                vec![-3.004723, -4.1488523, 8.490737],
                vec![-2.9640217, -4.1847653, 8.426094],
                vec![-2.896984, -4.323629, 8.502708],
                vec![-2.992752, -4.2302550000000005, 8.423699],
                vec![-2.8395233, -4.2422260000000005, 8.512285],
                vec![-2.8993783, -4.191948, 8.536227],
                vec![-2.8682537, -4.1991305, 8.49792],
                vec![-2.8491, -4.21589, 8.560169],
                vec![-2.8514943, -4.2925043, 8.519467],
                vec![-2.9041667, -4.285321700000001, 8.505102],
                vec![-2.7605145, -4.2015247, 8.521862],
                vec![-2.9113493, -4.239832, 8.466795],
                vec![-2.765303, -4.3092637, 8.483555],
                vec![-2.789245, -4.2254667, 8.473978],
                vec![-2.9161377, -4.2446203, 8.483555],
                vec![-2.791639, -4.2996870000000005, 8.459613],
                vec![-2.846706, -4.2470145, 8.471583],
                vec![-2.7940333, -4.275745, 8.471583],
                vec![-2.8275523, -4.3044753, 8.476372],
                vec![-2.8179753, -4.266168, 8.462007],
                vec![-2.825158, -4.206313, 8.48116],
                vec![-2.8443117, -4.251803, 8.567351],
                vec![-2.72939, -4.373907, 8.48116],
                vec![-2.8275523, -4.220678299999999, 8.548198],
                vec![-2.8179753, -4.311658, 8.509891],
                vec![-2.8203697, -4.330811499999999, 8.459613],
                vec![-2.7509377, -4.2829275, 8.447641],
                vec![-2.7748797, -4.2829275, 8.466795],
                vec![-2.7341783, -4.2925043, 8.483555],
                vec![-2.741361, -4.3044753, 8.514679],
                vec![-2.8299465, -4.273350700000001, 8.49792],
                vec![-2.80361, -4.3332057, 8.493132],
                vec![-2.7581203, -4.290109999999999, 8.488343],
                vec![-2.7605145, -4.290109999999999, 8.507497],
                vec![-2.777274, -4.2877160000000005, 8.529044],
                vec![-2.7605145, -4.3356, 8.447641],
                vec![-2.72939, -4.3403883, 8.471583],
                vec![-2.7988217, -4.218284, 8.447641],
                vec![-2.7820623, -4.3547535, 8.476372],
                vec![-2.7246015, -4.323629, 8.531439],
                vec![-2.7102363, -4.290109999999999, 8.418911],
                vec![-2.6862943, -4.311658, 8.423699],
                vec![-2.7269957, -4.314051999999999, 8.464401],
                vec![-2.765303, -4.3212347, 8.488343],
                vec![-2.7605145, -4.275745, 8.507497],
                vec![-2.7389667, -4.314051999999999, 8.471583],
                vec![-2.72939, -4.3571477, 8.450036],
            ]
        } 
        3 => {              // Stairs
            vec![
                vec![9.655367, -2.8576293, -3.5936968],
                vec![8.7671175, -5.4409730000000005, -3.8762126],
                vec![7.9075994, -5.036353, -3.9193082],
                vec![11.951406, -1.5120881000000002, -5.0062757],
                vec![15.243433, -1.0140941, -4.378995],
                vec![16.754175, -1.8592472, -4.177882],
                vec![15.308077, -2.0436008, -2.6479871],
                vec![17.50356, -2.55596, -2.7222073],
                vec![19.5931, -2.9749453, -2.1523874],
                vec![19.5931, 6.7191772, 1.271321],
                vec![14.5227785, 7.028029400000001, 3.596091],
                vec![9.459042, 8.397511999999999, 5.4300494],
                vec![14.441376000000002, 3.9682398, 2.3702598],
                vec![17.089363, 1.5285481, -0.1412579],
                vec![17.312023, -1.9023429, -1.4915876],
                vec![15.949723, -4.093037600000001, -2.554613],
                vec![13.656077, -5.867141, -1.7118542],
                vec![13.931411, -5.642086, -1.6448165],
                vec![12.9545765, -2.5870845, -4.8267107],
                vec![8.211663, -5.7330656, -4.560954],
                vec![7.6107183, -7.468862, -5.734113],
                vec![10.107871, -4.586243, -4.369418],
                vec![14.5706625, -2.1944356, -4.9655743],
                vec![16.876278, -1.5312417, -4.7189717],
                vec![15.660025, -1.2008418, -3.2345665],
                vec![14.041544, -1.4426562, -1.2138603],
                vec![15.602564, -1.3636475, -2.207454],
                vec![17.587357, -0.7603087, -0.29927522],
                vec![17.30484, 6.3863835, 0.9983821],
                vec![13.268217000000002, 5.2491374, 3.1842883],
                vec![14.383915, 2.8381765, 2.360683],
                vec![14.970494, 2.3138463, 0.10295067],
                vec![16.07901, 0.2021604, -1.4676456],
                vec![15.38948, -3.0850785, -1.6304513],
                vec![12.909086, -3.7889738, -1.8674773],
                vec![11.046398, -5.644480000000001, -1.13964],
                vec![12.947393, -5.309292, -1.9488802],
                vec![12.583475, -3.626168, -4.144363],
                vec![10.9242935, -2.7307367, -5.7508726],
                vec![5.9515367, -6.008399, -3.7325604],
                vec![9.672126, -5.7091236, -4.6375685],
                vec![14.929793, -1.6868647, -5.947197],
                vec![17.30484, -0.8464999, -4.5322237],
                vec![15.255404, -0.33653498, -2.5115175],
                vec![15.669601, -3.195212, -1.4820108],
                vec![19.5931, -2.7977743, -1.9632454],
                vec![19.5931, 5.5196824, 0.2873042],
                vec![16.328007, 9.872341, 2.4061728],
                vec![11.247511, 6.68087, 4.0318356],
                vec![14.285752, 4.1286510000000005, 3.3446999],
                vec![14.606576, 2.1869535, 0.89064306],
                vec![16.27294, -1.2702737, -0.5410896],
                vec![15.736639000000002, -2.5607483, -2.0638018],
                vec![14.048727, -7.0379057000000005, -0.7685388],
                vec![14.367155, -3.6956, -3.4620156],
                vec![14.6185465, -3.9038956, -5.657499],
                vec![7.167791, -7.8351746, -6.4284315],
                vec![4.474314, -7.464073700000001, -3.4261026],
                vec![13.337648000000002, -1.9430443, -5.315128],
                vec![16.727839000000003, -1.8688240000000005, -5.2983685],
                vec![16.275333, -1.2104186, -3.41892],
                vec![13.677626, -1.856853, -1.6136919],
                vec![16.943317, -3.4202669, -1.6687586],
                vec![19.5931, 5.510105599999999, 0.91219085],
                vec![16.770933, 10.8803, 3.0238767],
                vec![12.382362, 5.9290910000000006, 3.9240966],
                vec![13.210756, 4.5859437000000005, 3.8881836],
                vec![16.799664, 3.5827732000000005, 0.47644615],
                vec![15.841984, -2.934244, 0.23223756],
                vec![13.730298, -2.982128, -0.7685388],
                vec![10.440664, -4.3013330000000005, -0.21787235],
                vec![11.762264, -6.99481, 0.093373865],
                vec![13.442993, -3.8560114, -2.2050598],
                vec![12.190826, -3.1688757, -4.0414124],
                vec![9.040056, -4.9262195, -4.450821],
                vec![6.432771, -6.223877, -3.5913026],
                vec![12.415881, -1.583914, -4.865018],
                vec![14.790929, -0.07317279, -4.187459],
                vec![14.735863, -1.155352, -3.3063924],
                vec![10.981754, -2.0866964, -1.5897499],
                vec![12.348844, -1.7299603, -2.1068976],
                vec![19.229778, -1.5671546, -2.0159178],
                vec![18.542643, 1.7919102999999998, 0.8451532],
                vec![15.695937, 6.319346, 0.20829555],
                vec![10.488548, 1.064073, 2.6743233],
                vec![11.257088, 0.17342998, 1.2378023],
                vec![15.638476, 1.454328, -1.1899183],
                vec![14.070274, -2.1202152, 0.20829555],
                vec![10.613048, -1.6629227, -0.30166942],
                vec![8.970625, -3.056348, -0.17477672],
                vec![6.7392287, -2.484134, -0.06703765],
                vec![8.67135, -2.8241105, -0.7086837],
                vec![9.863662, -2.7762265, -1.340753],
                vec![10.294619, -5.180005, -2.1452048],
                vec![13.560309, -3.173664, -4.96318],
                vec![10.071958, -6.5159698, -5.21936],
                vec![9.171738, -5.12015, -3.5314474],
                vec![16.339976999999998, -3.8009448, -4.6112323],
                vec![18.602499, -1.2199954, -4.2161894],
                vec![19.5931, -1.5982792, -1.8243817],
            ]
        } 
        4 => {              // Walking
            vec![
                vec![4.972757, -0.15831658, 6.6967316],
                vec![3.25372, -0.19183542, 6.107758],
                vec![2.801216, -0.15592238, 5.997625],
                vec![3.7708676, -1.0513538, 7.731027],
                vec![4.661511, 0.16968904, 9.684695],
                vec![6.145916000000001, 0.83288294, 11.003901],
                vec![7.2592196, -0.79278004, 11.485135],
                vec![7.3549875999999985, -2.535759, 11.454011],
                vec![7.319074599999999, -2.7009587, 11.461193],
                vec![7.548918, -3.3761237, 9.3112],
                vec![5.331887200000001, -1.1566987, 7.0271316],
                vec![4.431667299999999, -0.6251859000000001, 4.599411],
                vec![3.4093432, -0.0457891079999999, 2.0519805],
                vec![3.1292217, -0.7113772, 0.6178537],
                vec![4.936844000000001, -1.1112089, -0.011821371],
                vec![11.669339, -1.0944493999999998, -0.28476036],
                vec![14.561535, 0.46657005, -2.145055],
                vec![17.616535, 0.38037878, -2.8657098],
                vec![19.017143, -3.9650972, 0.88361007],
                vec![15.775395, -1.6139913, -0.5960066],
                vec![12.210428, -0.7616554, -0.11956045],
                vec![7.6494746, -1.848623, 0.73516953],
                vec![6.878541499999999, -2.6027966, 0.61067104],
                vec![6.291962, -2.7823617, 0.16774376],
                vec![8.767567, -2.8350341, 0.10070611],
                vec![12.732365, -4.6546273000000005, 0.490961],
                vec![14.449007, -4.757578, -0.5409399],
                vec![17.678785, 3.5215714, 3.9026985],
                vec![15.315708, 2.628534, -1.0078093],
                vec![19.761143, -0.3211222999999999, -3.1482255],
                vec![19.201498, -1.6092029, -2.3006783],
                vec![11.374852, -3.2635963, 0.2347814],
                vec![8.841787, 0.2486977, -0.004638766],
                vec![5.8346696, 1.6229695, -1.2568063],
                vec![7.180211, 0.083497785, -1.3190556],
                vec![9.0476885, -0.19662382, -1.6853683],
                vec![7.654263, -0.26605567, -2.4155998],
                vec![10.292673, -0.79996264, -3.0380924],
                vec![12.643779, -3.0457240000000003, -1.1370962],
                vec![13.172897, -3.5676599, 1.8508675],
                vec![13.599066, -2.4567502, 0.2587234],
                vec![12.605472, -2.193388, -0.11956045],
                vec![11.513716, -1.0705074, 0.014514848],
                vec![11.908759, -1.9012954, -0.0525228],
                vec![13.706804, -2.6865935000000003, 1.2307693],
                vec![13.034034, -2.978686, 2.032827],
                vec![14.923059, -1.4368203000000002, 2.0280385],
                vec![17.288529999999998, -1.5062521999999998, 2.8037598],
                vec![16.139313, -0.13916297, -1.2352585],
                vec![19.752165, 0.6533178000000001, -3.7635355],
                vec![18.150444, -0.42886138, -2.2527943],
                vec![10.34774, -1.2692262, 0.69207394],
                vec![8.616732, -0.68025255, -0.030974984],
                vec![8.293514, 0.09546879, -1.9247885],
                vec![8.377312, 0.43544543, -2.2647653],
                vec![7.905653999999999, -0.3067571, -2.2073042],
                vec![6.991069, 0.17687166, -1.941548],
                vec![10.000581, -0.40491936, -2.3126493],
                vec![12.2798605, -1.8581998, 0.47899],
                vec![15.634137, -1.6929998, 0.7710826],
                vec![15.863979999999998, -2.3490112, 0.14859015],
                vec![11.633426, -1.8558056, 0.8381202],
                vec![13.412318, -0.77841485, 0.80460143],
                vec![11.973403, -3.4718916, 1.1469723],
                vec![14.061147, -2.535759, 1.9226936],
                vec![12.674904, -2.3921068, 2.7415106],
                vec![17.597382, -3.203741, 1.8269255],
                vec![15.7323, -2.3753474, -0.5313631],
                vec![19.65879, 1.7450738, -3.009362],
                vec![19.146431, 3.741838, -3.9670427],
                vec![13.692439000000002, -1.6953939999999998, -0.7516297],
                vec![10.742783, -2.2316952000000003, -0.28715456],
                vec![10.498574, -0.57011926, -1.2448353],
                vec![9.239224, -0.06015432, -2.4012346],
                vec![9.088389, 0.9023148, -1.9798552],
                vec![6.7827735, 1.345242, -1.4363713],
                vec![6.38773, -0.0002992752, -1.8769045],
                vec![7.9463553, -2.8637645, -1.491438],
                vec![12.34211, -5.317821, 2.3153427],
                vec![13.12262, -1.0202292, 1.8891748],
                vec![14.800954999999998, 1.117793, 0.9458593],
                vec![13.929465, -0.65391636, 0.60109425],
                vec![13.776237, -3.0888195, 1.1757027],
                vec![12.01171, -3.3976714999999995, 0.751929],
                vec![11.221623, -2.4830863, 0.9362825],
                vec![12.39957, -2.1981764, 0.39998132],
                vec![16.649279, -2.918831, 1.5779285],
                vec![16.673222, -1.5780782, 0.58672905],
                vec![17.120935, 1.7307086, -1.8314147],
                vec![18.131289, 3.148076, -3.2272344],
                vec![13.328521, 1.6181811, -2.2336404],
                vec![9.866506, -2.8781297, 0.16534956],
                vec![8.283937, -0.7257424, -0.4523545],
                vec![7.553706, -0.3474585, -1.4339771],
                vec![8.396465, 1.2207435, -2.025345],
                vec![7.920019, 0.73232645, -2.1163247],
                vec![6.442796700000001, -0.117615156, -1.6662147],
                vec![10.529699, -2.1287446, -1.5632641],
                vec![14.018051000000002, -2.2819736, 0.01690905],
                vec![17.824831, -1.2285248, -0.83063835],
            ]
        }
        _ => {              // never reached but needed
            unreachable!("This branch will never be reached");
        }
    }
}
